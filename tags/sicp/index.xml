<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sicp on sailing on lambdas ⛵️</title>
    <link>https://jeetparte.github.io/tags/sicp/</link>
    <description>Recent content in sicp on sailing on lambdas ⛵️</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Jun 2020 21:29:44 +0530</lastBuildDate>
    
	<atom:link href="https://jeetparte.github.io/tags/sicp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SICP: Centering Frames (Picture Language Bonus Exercise)</title>
      <link>https://jeetparte.github.io/posts/sicp-picture-language-bonus/</link>
      <pubDate>Sat, 27 Jun 2020 21:29:44 +0530</pubDate>
      
      <guid>https://jeetparte.github.io/posts/sicp-picture-language-bonus/</guid>
      <description>As an addition to my other picture language posts, this post shows you how to center arbitrary frames in the viewport (or actually, w.r.t. any other arbitrary frame).
Before I did this, my drawings sat inconveniently in the viewport window, uncentered:
Let us fix that.
In order to center a frame, all we need to do is place it in the right position, i.e. we simply need to manipulate it&amp;rsquo;s origin vector.</description>
    </item>
    
    <item>
      <title>SICP: Picture Language Exhibition</title>
      <link>https://jeetparte.github.io/posts/sicp-picture-language-exhibition/</link>
      <pubDate>Fri, 26 Jun 2020 20:40:24 +0530</pubDate>
      
      <guid>https://jeetparte.github.io/posts/sicp-picture-language-exhibition/</guid>
      <description>The picture language framework in SICP provides capabilities to create visually satisfying creative pictures, all built on top of a very simple concept - drawing a line between two points.
Spending some time with it, I came across some interesting patterns and I&amp;rsquo;m pleased to welcome you to the picture language grand exhibit.
ENTRY Exhibit 1 - Solos square-limit-with-outline-painter Notes: This picture helps clearly understand the &amp;lsquo;square limit&amp;rsquo; pattern described in the book.</description>
    </item>
    
    <item>
      <title>SICP: Fun with the Picture Language</title>
      <link>https://jeetparte.github.io/posts/sicp-picture-language/</link>
      <pubDate>Wed, 03 Jun 2020 19:22:07 +0530</pubDate>
      
      <guid>https://jeetparte.github.io/posts/sicp-picture-language/</guid>
      <description>So this week, I came across the picture language section in SICP and had some fun drawing with it.
In the book, the authors suppose the availability of the draw-line procedure and use it to implement segments-&amp;gt;painter. Before we can draw anything, we need to find a graphics library which provides the required drawing capabilities (or write one of our own).
With some searching, I found two options, both available inside Racket:</description>
    </item>
    
    <item>
      <title>SICP Solutions - Exercise 2.6</title>
      <link>https://jeetparte.github.io/posts/sicp-exercise-2.6-solved/</link>
      <pubDate>Wed, 25 Mar 2020 21:00:50 +0530</pubDate>
      
      <guid>https://jeetparte.github.io/posts/sicp-exercise-2.6-solved/</guid>
      <description>This was an interesting problem. Thought I&amp;rsquo;d share my solution here.
Scene We are given the Church numeral representation of the number zero:
(define zero (lambda (f) (lambda (x) x))) And a function that given a (positive) Church numeral, returns the next one:
define (add-1 n) (lambda (f) (lambda (x) (f ((n f) x))))) Part 1 Question:
 Define one and two directly (not in terms of zero and add- 1).</description>
    </item>
    
  </channel>
</rss>