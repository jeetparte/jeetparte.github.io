<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on sailing on lambdas ⛵️</title>
		<link>https://jeetparte.github.io/posts/</link>
		<description>Recent content in Posts on sailing on lambdas ⛵️</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Sat, 27 Jun 2020 21:29:44 +0530</lastBuildDate>
		<atom:link href="https://jeetparte.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>SICP: Centering Frames (Picture Language Bonus Exercise)</title>
			<link>https://jeetparte.github.io/posts/sicp-picture-language-bonus/</link>
			<pubDate>Sat, 27 Jun 2020 21:29:44 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/sicp-picture-language-bonus/</guid>
			<description>As an addition to my other picture language posts, this post shows you how to center arbitrary frames in the viewport (or actually, w.r.t. any other arbitrary frame).
Before I did this, my drawings sat inconveniently in the viewport window, uncentered:
In order to center a frame, all we need to do is place it in the right position, i.e. we simply need to manipulate it&amp;rsquo;s origin vector. Since the picture language already provides the capabilities to talk in terms of vectors, we can formulate the computation quite easily:</description>
			<content type="html"><![CDATA[<p>As an addition to my other picture language posts, this post shows you how to center arbitrary frames in the viewport (or actually, w.r.t. any other arbitrary frame).</p>
<p>Before I did this, my drawings sat inconveniently in the viewport window, uncentered:</p>
<p><img src="/img/sicp/square-limit-7-full.png" alt="square-limit-7-full"></p>
<p><strong>In order to center a frame, all we need to do is place it in the right position, i.e. we simply need to manipulate it&rsquo;s origin vector</strong>. Since the picture language already provides the capabilities to <em>talk</em> in terms of vectors, we can formulate the computation quite easily:</p>
<pre><code>; to center a frame w.r.t another, we calculate it's origin vector based on the relation
; that when the centers of the frame and reference-frame align,
; vector(reference-frame's center) = vector(origin) + relative_vector(frame's center)
(define (centered frame reference-frame)
  (define (relative-center frame)
    (add-vect (scale-vect 0.5 (edge1-frame frame))
              (scale-vect 0.5 (edge2-frame frame))))
  (let ((actual-center (add-vect (origin-frame reference-frame)
                                 (relative-center reference-frame)))
        (relative-center (relative-center frame)))
    (make-frame (sub-vect actual-center relative-center)
                (edge1-frame frame)
                (edge2-frame frame))))
</code></pre><p>If you have followed along with the picture language section, you should understand what I mean by <em>relative</em> and <em>absolute vector</em>.</p>
<p>Now, we can easily center our frames like in the image below.</p>
<p><img src="/img/sicp/arbitrary-frame-centered-in-viewport.png" alt="arbitrary-frame-centered-in-viewport">
<strong>Above:</strong> An arbitrary frame centered w.r.t. the <em>viewport frame</em>.</p>
<p><strong>P.S.</strong> It took me a while to discover the relation for arbitrary frames. Initially, I had only figured out how to center an arbitrary frame in a rectangular one. I struggled during the first attempt (trying to find a more generalisable solution). After a fews days&rsquo; gap, I sat down and the answer came almost immediately with almost no effort.</p>
<p>This is what draws me to problem solving and software. The only limits are one&rsquo;s own mind. With one perspective, we can generalize entire classes of ideas. With another, we can elaborate a single idea unto eternity. All in all, there is an element of creativity involved in these endeavours that I feel can be used to brings us closer to understanding creation, ourselves and the Intelligence behind it all.</p>
]]></content>
		</item>
		
		<item>
			<title>SICP: Picture Language Exhibition</title>
			<link>https://jeetparte.github.io/posts/sicp-picture-language-exhibition/</link>
			<pubDate>Fri, 26 Jun 2020 20:40:24 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/sicp-picture-language-exhibition/</guid>
			<description>The picture language framework in SICP provides capabilities to create visually satisfying creative pictures, all built on top of a very simple concept - drawing a line between two points.
Spending some time with it, I came across some interesting patterns and I&amp;rsquo;m pleased to welcome you to the picture language grand exhibit.
ENTRY Exhibit 1 - Solos square-limit-with-outline-painter Notes: This picture helps clearly understand the &amp;lsquo;square limit&amp;rsquo; pattern described in the book.</description>
			<content type="html"><![CDATA[<p>The picture language framework in <a href="https://g.co/kgs/GPVfya">SICP</a> provides capabilities to create visually satisfying creative pictures, all built on top of a very simple concept - drawing a line between two points.</p>
<p>Spending some time with it, I came across some interesting patterns and I&rsquo;m pleased to welcome you to the picture language grand exhibit.</p>
<h3 id="entry">ENTRY</h3>
<h2 id="exhibit-1---solos">Exhibit 1 - Solos</h2>
<h3 id="_square-limit-with-outline-painter_"><em>square-limit-with-outline-painter</em></h3>
<p><img src="/img/sicp/square-limit-with-outline-painter.png" alt="square-limit-with-outline-painter">
<strong>Notes:</strong> This picture helps clearly understand the &lsquo;square limit&rsquo; pattern described in the book. Compare with M.C. Escher&rsquo;s &ldquo;<a href="https://www.wikiart.org/en/m-c-escher/square-limit">Square Limit</a>&rdquo; woodcut which was the inspiration.</p>
<h3 id="_square-limit-with-x-painter_"><em>square-limit-with-x-painter</em></h3>
<p><img src="/img/sicp/square-limit-with-x-painter.png" alt="square-limit-with-x-painter">
<strong>Notes:</strong> Notice how the Xs blend into each other. There is the big X over the entire picture. In the center are many tilted squares. They can be also seen as diamonds. From each side, we see jutting mountain shapes that grow bigger as they approach the center.</p>
<p>A very balanced pattern.</p>
<h3 id="_square-limit-with-diamond-painter_"><em>square-limit-with-diamond-painter</em></h3>
<p><img src="/img/sicp/square-limit-with-diamond-painter.png" alt="square-limit-with-diamond-painter">
<strong>Notes:</strong> Another balanced pattern.</p>
<p>It emphasizes the diamond shapes which were more difficult to see earlier. This pattern also creates X shapes but they are smaller (as they do not combine, being separated into groups by size). One can also see the diamonds as squares which form cross-like patterns that increase as they reach outward.</p>
<h3 id="_square-limit-with-left-diagonal-painter_"><em>square-limit-with-left-diagonal-painter</em></h3>
<p><img src="/img/sicp/square-limit-with-left-diagonal-painter.png" alt="square-limit-with-left-diagonal-painter">
<strong>Notes:</strong> This picture was generated by drawing only one of the diagonals (the left one) from the X pattern. It conveys calmness and receptivity.</p>
<p>In a world with different physics, ripples on a surface from every corner would interact and create this pattern.</p>
<h3 id="_square-limit-with-right-diagonal-painter_"><em>square-limit-with-right-diagonal-painter</em></h3>
<p><img src="/img/sicp/square-limit-with-right-diagonal-painter.png" alt="square-limit-with-right-diagonal-painter">
<strong>Notes:</strong> This compliments the previous picture and projects a more forceful presence. There is an element of centredness.</p>
<p>If you compare the pictures, you will realize them to be positive and negative counterparts - masculine and feminine.</p>
<h2 id="exhibit-2---combinations">Exhibit 2 - Combinations</h2>
<h3 id="combination-i---outlinediagonal-painters">Combination I - outline+diagonal-painters</h3>
<p><img src="/img/sicp/outline+right-diagonal.png" alt="outline+right-diagonal">
<strong>Notes:</strong> This is the structured positive pattern from above. <strong>Imagery:</strong> The sun, radiating outward.</p>
<p><img src="/img/sicp/outline+left-diagonal.png" alt="outline+left-diagonal">
<strong>Notes:</strong> Similiarly, this is the structured negative pattern. <em>Imagery:</em> The moon, whose beauty comes from reflection.</p>
<h3 id="combination-ii---outlinex-painter">Combination II - outline+x-painter</h3>
<p><img src="/img/sicp/outline+x-painter.png" alt="outline+x-painter">
<strong>Notes:</strong> Balanced pattern that combines the positive and negative aspects.</p>
<h3 id="combination-iii---outlinediamond-painter">Combination III - outline+diamond-painter</h3>
<p><img src="/img/sicp/outline+diamond.png" alt="outline+diamond">
<strong>Notes:</strong> Another balanced combination of the two aspects.</p>
<h3 id="combination-iv---diamondx-painter">Combination IV - diamond+x-painter</h3>
<p><img src="/img/sicp/diamond+x-painter.png" alt="diamond+x-painter">
<strong>Notes:</strong> There are as many daimonds as there are Xs. The shapes grow smaller and more numerous as we look outward.</p>
<h3 id="combination-v---outlinediamondx-painter">Combination V - outline+diamond+x-painter</h3>
<p><img src="/img/sicp/outline+diamond+x-painter.png" alt="outline+diamond+x-painter">
<strong>Notes:</strong> Quite an intricate pattern. Has a gothic appearance?</p>
<h3 id="exhibit-3---the-centerpiece-oscillations-around-a-center">Exhibit 3 - The Centerpiece: &lsquo;Oscillations around a center&rsquo;</h3>
<p><img src="/img/sicp/centerpiece.png" alt="centerpiece &lsquo;oscillations around a center&rsquo;">
<strong>Notes:</strong>
This image was created by drawing mirrored images with frames centered. For all these images, I wrote some code that would center an arbitrary frame inside another.</p>
<p>Here, a square frame is outlined and centred within the &lsquo;viewport frame&rsquo;. Mirrored pairs of larger and smaller frames are centred with respect to this square frame - the pair of larger frames is outlined, the other contains square limit images of the wave painter.</p>
<p><em><strong>Whence multiple dimensions emerge and dissolve, what is at that grand center?</strong></em></p>
<h3 id="exit">EXIT</h3>
<p>Find accompanying code <a href="https://gist.github.com/jeetparte/0a7a2fd057b05915bc4c5435a3a2490e">here</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>SICP: Fun with the Picture Language</title>
			<link>https://jeetparte.github.io/posts/sicp-picture-language/</link>
			<pubDate>Wed, 03 Jun 2020 19:22:07 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/sicp-picture-language/</guid>
			<description>So this week, I came across the picture language section in SICP and had some fun drawing with it.
In the book, the authors suppose the availability of the draw-line procedure and use it to implement segments-&amp;gt;painter. Before we can draw anything, we need to find a graphics library which provides the required drawing capabilities (or write one of our own).
With some searching, I found two options, both available inside Racket:</description>
			<content type="html"><![CDATA[<p>So this week, I came across the picture language section in <a href="https://g.co/kgs/GPVfya">SICP</a> and had some fun drawing with it.</p>
<p>In the book, the authors suppose the availability of the <code>draw-line</code> procedure and use it to implement <code>segments-&gt;painter</code>. <strong>Before we can draw anything, we need to find a graphics library which provides the required drawing capabilities</strong> (or write one of our own).</p>
<p>With some searching, I found two options, both available inside Racket:</p>
<ol>
<li><strong>Use the <a href="https://docs.racket-lang.org/sicp-manual/SICP_Picture_Language.html">SICP picture language</a>:</strong></li>
</ol>
<p>The picture language library does not expose any <code>draw-line</code> primitive but rather provides painters that are capable of drawing.</p>
<p>The drawback for me was that these painters cannot accept frames as arguments and instead must be called with a special <a href="https://docs.racket-lang.org/sicp-manual/SICP_Picture_Language.html#%28part._.Painting%29">paint</a> procedure which can only draw rectangular frames.</p>
<ol start="2">
<li><strong>Use Racket&rsquo;s <a href="https://docs.racket-lang.org/graphics/index.html">legacy graphics library</a>:</strong></li>
</ol>
<p>This old library provides the much needed <a href="https://docs.racket-lang.org/graphics/Draw__Clear__and_Flip_Operations.html#%28def._%28%28lib._graphics%2Fgraphics..rkt%29._draw-line%29%29"><code>draw-line</code></a> procedure which draws within a viewport. With it, we can draw arbitrarily shaped frames, just like in the book.</p>
<p>I found it through <a href="https://ericscrivner.me/2015/05/the-sicp-picture-language-in-racket/">Eric Scrivner&rsquo;s blog post</a>.</p>
<p>Here is the essential part (tailored a bit):</p>
<pre><code>; Graphics (provides the drawing capabilities)
(require graphics/graphics)
(open-graphics)
(define viewport-width 500)
(define viewport-height 500)
(define vp (open-viewport &quot;Picture Language Canvas&quot; viewport-width viewport-height))

(define draw (draw-viewport vp))
(define (clear) ((clear-viewport vp)))
(define line (draw-line vp))
</code></pre><p>Scan through the original post to see the rest of the code. In it, you might notice some odd coordinates used to create frames:</p>
<pre><code>(define unit-frame (make-frame (make-vect 0 500) (make-vect 500 0) (make-vect 0 -500)))
</code></pre><p>Notice the negative y-coordinate. It is there because in the graphics library, the viewport&rsquo;s origin (0, 0) is at the upper-left corner, and positions increase to the right and down. We can avoid having to specify in terms of the graphic library&rsquo;s semantics, by creating a function that converts regular y-coordinates to those that make sense for the library:</p>
<pre><code>(define (normalize y-coord)
  (- viewport-height y-coord))
</code></pre><p>If we isolate our calls to the graphics library within the painters, we can use regular semantics everywhere else:</p>
<pre><code>(define (segments-&gt;painter segment-list)
  (lambda (frame)
    (for-each
     (lambda (segment)
       (let ((start-coord ((frame-coord-map frame) (start-segment segment)))
             (end-coord ((frame-coord-map frame) (end-segment segment))))
         (line
          (make-posn (xcor-vect start-coord) (normalize (ycor-vect start-coord))) ; convert y-coords here
          (make-posn (xcor-vect end-coord) (normalize (ycor-vect end-coord))))))
     segment-list)))

(define unit-frame (make-frame (make-vect 0 0) (make-vect 500 0) (make-vect 0 500))) ; defined with normal semantics
</code></pre><p>With all this in place, you can draw by creating any painter from <code>segments-&gt;painter</code> and passing it a frame:</p>
<pre><code>(define x-painter
  (segments-&gt;painter
   (list (make-segment (make-vect 0 0)
                       (make-vect 1 1))
         (make-segment (make-vect 0 1)
                       (make-vect 1 0)))))

(x-painter some-frame) ; draws to the viewport                  
</code></pre><p>So I went ahead and completed exercise 2.49 from the book, with a twist!</p>
<p>Here&rsquo;s what I created:</p>
<p><img src="/img/sicp/sicp-drawing-the-wave-painter-figure.png" alt="Drawing the wave painter figure"></p>
<p><em>The wave painter figure from the book (with a tattoo on it&rsquo;s arm!)</em></p>
<p>I measured the points on the original image in macOS&rsquo; <em>Preview</em> app. After adjusting the location for the tattoo&rsquo;s frame, I created a <code>tattoo-painter</code> to draw it:</p>
<pre><code>(define tattoo-painter
  (lambda (frame)
    (x-painter frame)
    (diamond-painter frame)))

(tattoo-painter tattoo-frame)
</code></pre><p>You can see my full code <a href="https://gist.github.com/jeetparte/ae493585feaf33087977da96c4b0f5fc">here</a>.</p>
<p>I had great fun doing this section. I hope you enjoy it too!</p>
]]></content>
		</item>
		
		<item>
			<title>SICP Solutions - Exercise 2.6</title>
			<link>https://jeetparte.github.io/posts/sicp-exercise-2.6-solved/</link>
			<pubDate>Wed, 25 Mar 2020 21:00:50 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/sicp-exercise-2.6-solved/</guid>
			<description>This was an interesting problem. Thought I&amp;rsquo;d share my solution here.
Scene We are given the Church numeral representation of the number zero:
(define zero (lambda (f) (lambda (x) x))) And a function that given a (positive) Church numeral, returns the next one:
define (add-1 n) (lambda (f) (lambda (x) (f ((n f) x))))) Part 1 Question:
 Define one and two directly (not in terms of zero and add- 1).</description>
			<content type="html"><![CDATA[<p>This was an interesting problem. Thought I&rsquo;d share my solution here.</p>
<h2 id="scene">Scene</h2>
<p>We are given the <a href="https://en.wikipedia.org/wiki/Church_encoding#Church_numerals">Church numeral</a> representation of the number <em>zero</em>:</p>
<pre><code>(define zero (lambda (f) (lambda (x) x)))
</code></pre><p>And a function that given a (positive) Church numeral, returns the next one:</p>
<pre><code>define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
</code></pre><h2 id="part-1">Part 1</h2>
<p><em>Question:</em></p>
<blockquote>
<p>Define <code>one</code> and <code>two</code> directly (not in terms of <code>zero</code> and <code>add- 1</code>). (Hint: Use substitution to evaluate <code>(add-1 zero)</code>).</p>
</blockquote>
<p><em>Answer:</em></p>
<p>Here are the steps for the substitution:</p>
<pre><code>(add-1 zero)
</code></pre><ol>
<li>Evaluate zero.</li>
</ol>
<pre><code>(add-1 (lambda (f) (lambda (x) x)))
</code></pre><ol start="2">
<li>Apply the lambda argument to <code>add-1</code>.</li>
</ol>
<pre><code>; body of add-1
(lambda (f) (lambda (x) (f ((n f) x))))) ; substitute the 'n' here

; result
(lambda (f) (lambda (x) (f (((lambda (f) (lambda (x) x)) f) x))))
</code></pre><ol start="3">
<li>This looks like a combinaton with lot of lambdas; but look closely, and you&rsquo;ll see that only one of those is supplied an argument. Apply it.</li>
</ol>
<pre><code>(lambda (f) (lambda (x) (f ((lambda (x) x) x))))
</code></pre><ol start="4">
<li>Apply lambda procedure to &lsquo;x&rsquo;.</li>
</ol>
<pre><code>(lambda (f) (lambda (x) (f x)))
</code></pre><ol start="5">
<li>No more arguments to apply. This is the body for our procedure that defines &lsquo;one&rsquo;:</li>
</ol>
<pre><code>(define one (lambda (f) (lambda (x) (f x))))
</code></pre><p>Similiarly, we can find &lsquo;two&rsquo; by evaluating <code>(add-1 one)</code>:</p>
<pre><code>(define two (lambda (f) (lambda (x) (f (f x)))))
</code></pre><h2 id="part-2">Part 2</h2>
<p><em>Question:</em></p>
<blockquote>
<p>Give a direct definition of the addition procedure + (not in terms of repeated application of add-1).</p>
</blockquote>
<p><em>Answer:</em></p>
<p>I leave this exercise to the reader. You can check your answer <a href="https://github.com/jeetparte/sicp/blob/master/chapter2/sicp2.06.rkt">here</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Lisp: cons, car and cdr</title>
			<link>https://jeetparte.github.io/posts/lisp-cons-car-cdr/</link>
			<pubDate>Fri, 20 Mar 2020 23:33:15 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/lisp-cons-car-cdr/</guid>
			<description>There is a footnote in chapter 2 of SICP that explains what the names of these popular Lisp primitives stand for -
 The name cons stands for “construct.” The names car and cdr derive from the original implementation of Lisp on the IBM 704. That machine had an addressing scheme that allowed one to reference the “address” and “decrement” parts of a memory location. car stands for “Contents of Address part of Register” and cdr (pronounced “could-er”) stands for “Contents of Decrement part of Register.</description>
			<content type="html"><![CDATA[<p>There is a footnote in chapter 2 of <a href="https://g.co/kgs/GPVfya">SICP</a> that explains what the names of these popular Lisp primitives stand for -</p>
<blockquote>
<p>The name <code>cons</code> stands for “construct.” The names <code>car</code> and <code>cdr</code> derive from the original implementation of Lisp on the <em>IBM 704</em>. That machine had an addressing scheme that allowed one to reference the “address” and “decrement” parts of a memory location. <code>car</code> stands for “Contents of Address part of Register” and <code>cdr</code> (pronounced “could-er”) stands for “Contents of Decrement part of Register.”</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Siri Touch Typing Easter Egg in macOS</title>
			<link>https://jeetparte.github.io/posts/siri-touch-typing-easter-egg/</link>
			<pubDate>Thu, 05 Mar 2020 23:31:53 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/siri-touch-typing-easter-egg/</guid>
			<description>If you type the home row keys of the QWERTY layout into macOS&amp;rsquo; Spotlight Search twice, Siri understands that you are touch typing.
Steps to reproduce  Make sure you&amp;rsquo;re connected to the Internet. Type asdfjkl;asdfjkl; into Spotlight Search.  </description>
			<content type="html"><![CDATA[<p><img src="/img/siri-touch-typing-easter-egg.png" alt="Siri Touch Typing Easter Egg in macOS">
<em>If you type the home row keys of the QWERTY layout into macOS&rsquo; Spotlight Search twice, Siri understands that you are touch typing.</em></p>
<h2 id="steps-to-reproduce">Steps to reproduce</h2>
<ol>
<li>Make sure you&rsquo;re connected to the Internet.</li>
<li>Type <code>asdfjkl;asdfjkl;</code> into Spotlight Search.</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>ArgumentNullException / Don&#39;t forget the precedent!</title>
			<link>https://jeetparte.github.io/posts/argumentnullexception/</link>
			<pubDate>Sat, 29 Feb 2020 22:38:55 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/argumentnullexception/</guid>
			<description>At work this week, I discovered a quirk in the .NET API.
An ArgumentException is thrown when one of the arguments to a method is invalid. A more specific ArgumentException is an ArgumentNullException which (as you may have guessed) is thrown when an argument is invalid because it is null.
The funny thing is that while the base class provides this constructor -
public ArgumentException (string message, string paramName);  the one provided by the derived class is -</description>
			<content type="html"><![CDATA[<p>At work this week, I discovered a quirk in the .NET API.</p>
<p>An <a href="https://docs.microsoft.com/en-us/dotnet/api/system.argumentexception?view=netframework-4.8">ArgumentException</a> is thrown when one of the arguments to a method is invalid.
A more specific <code>ArgumentException</code> is an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.argumentnullexception?view=netframework-4.8">ArgumentNullException</a> which (as you may have guessed) is thrown when an argument is invalid because it is <code>null</code>.</p>
<p>The funny thing is that while the base class provides this constructor -</p>
<pre><code>public ArgumentException (string message, string paramName);
</code></pre>
<p>the one provided by the derived class is -</p>
<pre><code>public ArgumentNullException (string paramName, string message);
</code></pre>
<p>The order of the parameters is swapped!</p>
<p>Inconsistencies like these can lead to confusion. In our case, we ended up with code that was passing arguments to the constructor in the wrong order -</p>
<pre><code>throw new ArgumentNullException(messageArg, paramNameArg);
</code></pre>
<h2 id="the-moral">The moral</h2>
<p>Always strive for consistent interfaces.</p>
<p>Breaking reasonable expectations by creating inconsistencies introduces accidental complexity. And for us mere mortals, <em>accidental complexity is the enemy!</em></p>
]]></content>
		</item>
		
		<item>
			<title>Setting Up This Site</title>
			<link>https://jeetparte.github.io/posts/setting-up-this-site/</link>
			<pubDate>Sat, 22 Feb 2020 15:12:38 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/setting-up-this-site/</guid>
			<description>A quick update about this site - I&amp;rsquo;m in the middle of setting it up so that it&amp;rsquo;s just as I&amp;rsquo;d want (or failing that, till all the essentials are met).
Here&amp;rsquo;s what I&amp;rsquo;m working on -
 On the technical side, I need to get this site deployed. (It wasn&amp;rsquo;t when I wrote this!). I&amp;rsquo;m using Hugo - the static site generator. Also, need to enable comments so that we can talk to each other :P Importantly, I want this site to be organized so that it&amp;rsquo;s easy to navigate and view related content.</description>
			<content type="html"><![CDATA[<p>A quick update about this site - I&rsquo;m in the middle of setting it up so that it&rsquo;s just as I&rsquo;d want (or failing that, till all the essentials are met).</p>
<p>Here&rsquo;s what I&rsquo;m working on -</p>
<ol>
<li>On the technical side, I need to get this site deployed. (It wasn&rsquo;t when I wrote this!). I&rsquo;m using <a href="https://gohugo.io">Hugo - the static site generator</a>.</li>
<li>Also, need to enable comments so that we can talk to each other :P</li>
<li>Importantly, I want this site to be organized so that it&rsquo;s easy to navigate and view related content. Maybe simple classfication features like <em>Tags</em> and <em>Categories</em> will do it. But I&rsquo;ll think some more and experiment a bit.</li>
</ol>
<p><strong>P.S.</strong> Since I&rsquo;m learning Hugo and <a href="https://daringfireball.net/projects/markdown/">Markdown</a>, you might see posts about these under a <em>Learning</em> category.<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>First Blog Post</title>
			<link>https://jeetparte.github.io/posts/first-post/</link>
			<pubDate>Sat, 15 Feb 2020 23:51:21 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/first-post/</guid>
			<description>A new blog is born. Readers, you are welcome!</description>
			<content type="html"><![CDATA[<p>A new blog is born. Readers, you are welcome!</p>
]]></content>
		</item>
		
	</channel>
</rss>
