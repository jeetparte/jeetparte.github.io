<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on sailing on lambdas ⛵️</title>
		<link>https://jeetparte.github.io/posts/</link>
		<description>Recent content in Posts on sailing on lambdas ⛵️</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Tue, 21 Apr 2020 20:21:00 +0530</lastBuildDate>
		<atom:link href="https://jeetparte.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>The Need for Digital Literacy</title>
			<link>https://jeetparte.github.io/posts/need-for-digital-literacy/</link>
			<pubDate>Tue, 21 Apr 2020 20:21:00 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/need-for-digital-literacy/</guid>
			<description>These last few weeks, with the lockdown in place and having to work from home, I&amp;rsquo;m being utilized to the fullest by those in my social circle. When it comes to help with tech stuff that is :)
While it is clear that these people, friends and family, are a little lacking in technical knowledge which we techies consider &amp;lsquo;basic&amp;rsquo;, I think there are some deeper issues that create such situations.</description>
			<content type="html"><![CDATA[<p>These last few weeks, with the lockdown in place and having to work from home, I&rsquo;m being utilized to the fullest by those in my social circle. When it comes to help with tech stuff that is :)</p>
<p>While it is clear that these people, friends and family, are a little lacking in technical knowledge which we techies consider &lsquo;basic&rsquo;, I think there are some deeper issues that create such situations.</p>
<p>First is, the lack of bare minimum knowledge required so that one can build upon it independently. I think these people somehow jumped straight to their particular use case without mastering the basics of the computer / operating system / tool they use.</p>
<p>Take for example, an old guy in his fifties, who uses professional music production software like <em>Logic Pro X</em> on macOS but doesn&rsquo;t know how the file system works. Every file he uses <em>must</em> be located on the desktop so its convenient for drag and drop into applications. If its under <em>Documents</em> or <em>Downloads</em>, he cannot use it. If he somehow finds his files there, he will make it a point to drag it to the desktop first. Strange ritual! Perhaps Finder windows are too intimidating to use files directly from. Or maybe that&rsquo;s not possible (that&rsquo;s what the person told me they believed). But the conclusion is that people under ignorance can form false beliefs around the limited things they know.</p>
<p>Some education is certainly called for. That said I think the folks at Apple have done a pretty good job at making their OSs easy to learn and use. Shame these people skip over reading the provided user manuals etc. Really good starting point IMO.</p>
<p>Second, sometimes software is designed in such ways that its not clear what exactly the problem is (or whose fault is it). Was the error caused by the software or was it the user&rsquo;s fault? What are the next steps to resolve the issues? These can be frustrating for normal users as it is. Even more cryptic to the digitally less-literate folks. They might end up with the conclusion that the workings of technology are unpredictable or unknowable (when in fact most software works systematically and is never whimsical) and some expertise is needed to resolve their problems; that the task is beyond them and they need an expert to figure it out. That&rsquo;s unfortunate though, being dependent like that and giving up.</p>
<p>Digital literacy matters because of the pervasiveness of technology. It tangibly impacts people&rsquo;s life and work. Not knowing how to backup your files (or its importance), can lead to lost data that might mean months of precious work. Not knowing the importance of good passwords might lead to a costly security breach. Knowing that you can use a password manager means you can save all lot of time and frustration resetting forgotten ones. Digital literacy is a fundamental skill just like basic mathematics and every individual must be well equipped with it.</p>
<p>And while we can help the folks out, its better to teach them how to fish.<br>
<strong>edit:</strong> The willing ones that is.</p>
]]></content>
		</item>
		
		<item>
			<title>SICP Solutions - Exercise 2.6</title>
			<link>https://jeetparte.github.io/posts/sicp-exercise-2.6-solved/</link>
			<pubDate>Wed, 25 Mar 2020 21:00:50 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/sicp-exercise-2.6-solved/</guid>
			<description>This was an interesting problem. Thought I&amp;rsquo;d share my solution here.
Scene We are given the Church numeral representation of the number zero:
(define zero (lambda (f) (lambda (x) x))) And a function that given a (positive) Church numeral, returns the next one:
define (add-1 n) (lambda (f) (lambda (x) (f ((n f) x))))) Part 1 Question:
 Define one and two directly (not in terms of zero and add- 1).</description>
			<content type="html"><![CDATA[<p>This was an interesting problem. Thought I&rsquo;d share my solution here.</p>
<h2 id="scene">Scene</h2>
<p>We are given the <a href="https://en.wikipedia.org/wiki/Church_encoding#Church_numerals">Church numeral</a> representation of the number <em>zero</em>:</p>
<pre><code>(define zero (lambda (f) (lambda (x) x)))
</code></pre><p>And a function that given a (positive) Church numeral, returns the next one:</p>
<pre><code>define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
</code></pre><h2 id="part-1">Part 1</h2>
<p><em>Question:</em></p>
<blockquote>
<p>Define <code>one</code> and <code>two</code> directly (not in terms of <code>zero</code> and <code>add- 1</code>). (Hint: Use substitution to evaluate <code>(add-1 zero)</code>).</p>
</blockquote>
<p><em>Answer:</em></p>
<p>Here are the steps for the substitution:</p>
<pre><code>(add-1 zero)
</code></pre><ol>
<li>Evaluate zero.</li>
</ol>
<pre><code>(add-1 (lambda (f) (lambda (x) x)))
</code></pre><ol start="2">
<li>Apply the lambda argument to <code>add-1</code>.</li>
</ol>
<pre><code>; body of add-1
(lambda (f) (lambda (x) (f ((n f) x))))) ; substitute the 'n' here

; result
(lambda (f) (lambda (x) (f (((lambda (f) (lambda (x) x)) f) x))))
</code></pre><ol start="3">
<li>This looks like a combinaton with lot of lambdas; but look closely, and you&rsquo;ll see that only one of those is supplied an argument. Apply it.</li>
</ol>
<pre><code>(lambda (f) (lambda (x) (f ((lambda (x) x) x))))
</code></pre><ol start="4">
<li>Apply lambda procedure to &lsquo;x&rsquo;.</li>
</ol>
<pre><code>(lambda (f) (lambda (x) (f x)))
</code></pre><ol start="5">
<li>No more arguments to apply. This is the body for our procedure that defines &lsquo;one&rsquo;:</li>
</ol>
<pre><code>(define one (lambda (f) (lambda (x) (f x))))
</code></pre><p>Similiarly, we can find &lsquo;two&rsquo; by evaluating <code>(add-1 one)</code>:</p>
<pre><code>(define two (lambda (f) (lambda (x) (f (f x)))))
</code></pre><h2 id="part-2">Part 2</h2>
<p><em>Question:</em></p>
<blockquote>
<p>Give a direct definition of the addition procedure + (not in terms of repeated application of add-1).</p>
</blockquote>
<p><em>Answer:</em></p>
<p>I leave this exercise to the reader. You can check your answer <a href="https://github.com/jeetparte/sicp/blob/master/chapter2/sicp2.6.rkt">here</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Lisp: cons, car and cdr</title>
			<link>https://jeetparte.github.io/posts/lisp-cons-car-cdr/</link>
			<pubDate>Fri, 20 Mar 2020 23:33:15 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/lisp-cons-car-cdr/</guid>
			<description>There is a footnote in chapter 2 of SICP that explains what the names of these popular Lisp primitives stand for -
 The name cons stands for “construct.” The names car and cdr derive from the original implementation of Lisp on the IBM 704. That machine had an addressing scheme that allowed one to reference the “address” and “decrement” parts of a memory location. car stands for “Contents of Address part of Register” and cdr (pronounced “could-er”) stands for “Contents of Decrement part of Register.</description>
			<content type="html"><![CDATA[<p>There is a footnote in chapter 2 of <a href="https://g.co/kgs/GPVfya">SICP</a> that explains what the names of these popular Lisp primitives stand for -</p>
<blockquote>
<p>The name <code>cons</code> stands for “construct.” The names <code>car</code> and <code>cdr</code> derive from the original implementation of Lisp on the <em>IBM 704</em>. That machine had an addressing scheme that allowed one to reference the “address” and “decrement” parts of a memory location. <code>car</code> stands for “Contents of Address part of Register” and <code>cdr</code> (pronounced “could-er”) stands for “Contents of Decrement part of Register.”</p>
</blockquote>
]]></content>
		</item>
		
		<item>
			<title>Siri Touch Typing Easter Egg in macOS</title>
			<link>https://jeetparte.github.io/posts/siri-touch-typing-easter-egg/</link>
			<pubDate>Thu, 05 Mar 2020 23:31:53 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/siri-touch-typing-easter-egg/</guid>
			<description>If you type the home row keys of the QWERTY layout into macOS&amp;rsquo; Spotlight Search twice, Siri understands that you are touch typing.
Steps to reproduce  Make sure you&amp;rsquo;re connected to the Internet. Type asdfjkl;asdfjkl; into Spotlight Search.  </description>
			<content type="html"><![CDATA[<p><img src="/img/siri-touch-typing-easter-egg.png" alt="Siri Touch Typing Easter Egg in macOS">
<em>If you type the home row keys of the QWERTY layout into macOS&rsquo; Spotlight Search twice, Siri understands that you are touch typing.</em></p>
<h2 id="steps-to-reproduce">Steps to reproduce</h2>
<ol>
<li>Make sure you&rsquo;re connected to the Internet.</li>
<li>Type <code>asdfjkl;asdfjkl;</code> into Spotlight Search.</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>ArgumentNullException / Don&#39;t forget the precedent!</title>
			<link>https://jeetparte.github.io/posts/argumentnullexception/</link>
			<pubDate>Sat, 29 Feb 2020 22:38:55 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/argumentnullexception/</guid>
			<description>At work this week, I discovered a quirk in the .NET API.
An ArgumentException is thrown when one of the arguments to a method is invalid. A more specific ArgumentException is an ArgumentNullException which (as you may have guessed) is thrown when an argument is invalid because it is null.
The funny thing is that while the base class provides this constructor -
public ArgumentException (string message, string paramName);  the one provided by the derived class is -</description>
			<content type="html"><![CDATA[<p>At work this week, I discovered a quirk in the .NET API.</p>
<p>An <a href="https://docs.microsoft.com/en-us/dotnet/api/system.argumentexception?view=netframework-4.8">ArgumentException</a> is thrown when one of the arguments to a method is invalid.
A more specific <code>ArgumentException</code> is an <a href="https://docs.microsoft.com/en-us/dotnet/api/system.argumentnullexception?view=netframework-4.8">ArgumentNullException</a> which (as you may have guessed) is thrown when an argument is invalid because it is <code>null</code>.</p>
<p>The funny thing is that while the base class provides this constructor -</p>
<pre><code>public ArgumentException (string message, string paramName);
</code></pre>
<p>the one provided by the derived class is -</p>
<pre><code>public ArgumentNullException (string paramName, string message);
</code></pre>
<p>The order of the parameters is swapped!</p>
<p>Inconsistencies like these can lead to confusion. In our case, we ended up with code that was passing arguments to the constructor in the wrong order -</p>
<pre><code>throw new ArgumentNullException(messageArg, paramNameArg);
</code></pre>
<h2 id="the-moral">The moral</h2>
<p>Always strive for consistent interfaces.</p>
<p>Breaking reasonable expectations by creating inconsistencies introduces accidental complexity. And for us mere mortals, <em>accidental complexity is the enemy!</em></p>
]]></content>
		</item>
		
		<item>
			<title>Setting Up This Site</title>
			<link>https://jeetparte.github.io/posts/setting-up-this-site/</link>
			<pubDate>Sat, 22 Feb 2020 15:12:38 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/setting-up-this-site/</guid>
			<description>A quick update about this site - I&amp;rsquo;m in the middle of setting it up so that it&amp;rsquo;s just as I&amp;rsquo;d want (or failing that, till all the essentials are met).
Here&amp;rsquo;s what I&amp;rsquo;m working on -
 On the technical side, I need to get this site deployed. (It wasn&amp;rsquo;t when I wrote this!). I&amp;rsquo;m using Hugo - the static site generator. Also, need to enable comments so that we can talk to each other :P Importantly, I want this site to be organized so that it&amp;rsquo;s easy to navigate and view related content.</description>
			<content type="html"><![CDATA[<p>A quick update about this site - I&rsquo;m in the middle of setting it up so that it&rsquo;s just as I&rsquo;d want (or failing that, till all the essentials are met).</p>
<p>Here&rsquo;s what I&rsquo;m working on -</p>
<ol>
<li>On the technical side, I need to get this site deployed. (It wasn&rsquo;t when I wrote this!). I&rsquo;m using <a href="https://gohugo.io">Hugo - the static site generator</a>.</li>
<li>Also, need to enable comments so that we can talk to each other :P</li>
<li>Importantly, I want this site to be organized so that it&rsquo;s easy to navigate and view related content. Maybe simple classfication features like <em>Tags</em> and <em>Categories</em> will do it. But I&rsquo;ll think some more and experiment a bit.</li>
</ol>
<p><strong>P.S.</strong> Since I&rsquo;m learning Hugo and <a href="https://daringfireball.net/projects/markdown/">Markdown</a>, you might see posts about these under a <em>Learning</em> category.<!-- raw HTML omitted --></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
]]></content>
		</item>
		
		<item>
			<title>First Blog Post</title>
			<link>https://jeetparte.github.io/posts/first-post/</link>
			<pubDate>Sat, 15 Feb 2020 23:51:21 +0530</pubDate>
			
			<guid>https://jeetparte.github.io/posts/first-post/</guid>
			<description>A new blog is born. Readers, you are welcome!</description>
			<content type="html"><![CDATA[<p>A new blog is born. Readers, you are welcome!</p>
]]></content>
		</item>
		
	</channel>
</rss>
